@model GoldReserves.Web.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Home Page";
}@section header {
<script src="~/Scripts/fixes.js"></script>
<script src="~/Scripts/topojson.v1.js"></script>
<script src="~/Scripts/ieee754FloatingPointUtilities.js"></script>
<script src="~/Scripts/geo.js"></script>
<script src="~/Scripts/appData.js"></script>
<script src="~/Scripts/appGeoMap.js"></script>
<style>
    #mapPosStatic {
        margin-top: 5px;
    }
</style>
}
<div id="mapPosStatic">
    <div id="mapPosAbs">
    </div>
</div>
<script>
    (function () {
        var g = this,
            x = g.x,
            GeoRegion = x.GeoRegion,
            PoliticalEntity = x.PoliticalEntity,
            topoJsonLib = g.topojson,
            AppRepository = x.AppRepository,
            ArrayLike_findIndex = x.ArrayLike_findIndex;

        x.AppRepository.getInstance().__setGeoRegions((function () {
            var c, a;
            @{{
                int n = Model.GeoRegions.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});")
                for (int i = 0; i < n; i++)
                {
                    var geoRegion = Model.GeoRegions[i];
                    @Html.Raw("c=new GeoRegion();" +
                        $"c.__setId_alpha3(\"{Ajax.JavaScriptStringEncode(geoRegion.Id_Alpha3)}\");" +
                        $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}] = c;")
                }
            }}
            return a;
        })());
        x.AppRepository.getInstance().__setPoliticalEntities((function () {
            var t1, t2, a;
            @{{
                int n = Model.PoliticalEntities.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});")
                for (int i = 0; i < n; i++)
                {
                    var p = Model.PoliticalEntities[i];
                    @Html.Raw("t1=new PoliticalEntity();"
                        + $"t1.__setId({p.Id.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});"
                        + "t2={};")
                    foreach(var pen in p.Names)
                    {
                        @Html.Raw($"t2[\"{Ajax.JavaScriptStringEncode(pen.Name)}\"]={pen.LanguageId.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)};")
                    }
                    @Html.Raw(
                        $"t1.__setLanguageIdFromName(t2);"
                        + (p.GeoRegionId_Alpha3 == null
                            ? ""
                            : $"t1.__setGeoRegion(AppRepository.getInstance().getGeoRegion(\"{Ajax.JavaScriptStringEncode(p.GeoRegionId_Alpha3)}\"));")
                        + $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}]=t1;")
                }
            }}
            return a;
        })());


        function PoliticalEntityViewModel() {
            this.__politicalEntity = null;
            this.__resourceQuantity = null;
            this.__color = null;
        }
        PoliticalEntityViewModel.prototype = {
            getPoliticalEntity: function () {
                return this.__politicalEntity;
            },
            __setPoliticalEntity: function (value) {
                this.__politicalEntity = value;
            },
            getResourceQuantity: function () {
                return this.__resourceQuantity;
            },
            __setResourceQuantity: function (value) {
                this.__resourceQuantity = value;
            },
            getColor: function () {
                return this.__color;
            },
            __setColor: function (value) {
                this.__color = value;
            }
        };

        function getPoliticalEntityViewModels() {
            var c, a;
            @{{
                int n = Model.PoliticalEntityViewModels.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});");
                    for (int i = 0; i < n; i++)
                    {
                        var cvm = Model.PoliticalEntityViewModels[i];
                    @Html.Raw("c=new PoliticalEntityViewModel();" +
                        $"c.__setPoliticalEntity(AppRepository.getInstance().getPoliticalEntity({cvm.PoliticalEntityId.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}));" +
                        $"c.__setResourceQuantity({cvm.ResourceQuantity.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});" +
                        $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}] = c;");
                }
            }}
            return a;
        }

        function fixGeoRegionGeoJson_features(fa) {
            var i, j;
            i = ArrayLike_findIndex(fa, function (f) { return f.properties.name === "Antarctica"; });
            if (0 <= i) fa.splice(i, 1);
            return fa;
        }

        function MyApp() {
            var i, n;
            this.__geoRegionsTopoJson_xmlHttpRequest = null;
            this.__geoRegionsTopoJson = null;
            this.__politicalEntityViewModels = getPoliticalEntityViewModels();
            this.__lastVPSize = x.getViewportSize();
            this.__windowOnResize_func = this.__windowOnResize.bind(this);
            window.addEventListener("resize", this.__windowOnResize_func, false);
            this.__updateAppGeoMapHERootSize();
            this.__appGeoMap = new x.AppGeoMap(document.getElementById("mapPosAbs"));
            this.__initialize();
        }
        MyApp.prototype = {
            __getGeoRegionTopologyTopoJson_onReadyStateChange: function () {
                var req, countryGeoJson_features;
                req = this.__geoRegionsTopoJson_xmlHttpRequest;
                if (req.readyState !== 4) return;
                this.__geoRegionsTopoJson_xmlHttpRequest = null;
                if (req.status !== 200) throw Error();

                this.__geoRegionsTopoJson = JSON.parse(req.responseText);

                countryGeoJson_features = topoJsonLib.feature(this.__geoRegionsTopoJson, this.__geoRegionsTopoJson.objects["units"]).features;
                countryGeoJson_features = fixGeoRegionGeoJson_features(countryGeoJson_features);
                this.__appGeoMap.initializeGeoRegionTopography(countryGeoJson_features);
                this.__initializeAppGeoMapCore();
            },
            __initialize: function () {
                var req;
                req = new XMLHttpRequest();
                req.open("GET", "@Ajax.JavaScriptStringEncode(Url.Content("~/Content/geoRegionsTopoJson.json"))");
                req.onreadystatechange = this.__getGeoRegionTopologyTopoJson_onReadyStateChange.bind(this);
                req.send();
                this.__geoRegionsTopoJson_xmlHttpRequest = req;
                // 38.9072° N, 77.0369° W

                this.__appGeoMap.
            },
            __initializeAppGeoMapCore: function () {

                var i, n, pvm, geoRegionView, g, t,
                    colorMap = x.ColorMap.FIVE_CLASS_ORANGE,
                    resourceQuantityMax = -1 / 0;
                n = this.__politicalEntityViewModels.length;
                for (i = 0; i < n;) {
                    pvm = this.__politicalEntityViewModels[i];
                    g = pvm.getPoliticalEntity().getGeoRegion();
                    if (g === null) throw Error();
                    geoRegionView = this.__appGeoMap.getGeoRegionView(g.getId_alpha3());
                    if (geoRegionView === null) {
                        this.__politicalEntityViewModels.splice(i, 1);
                        n -= 1;
                        continue;
                    }
                    t = pvm.getResourceQuantity();
                    if (resourceQuantityMax < t) {
                        resourceQuantityMax = t;
                    }
                    i += 1;
                }
                for (i = 0; i < n; i++) {
                    pvm = this.__politicalEntityViewModels[i];
                    geoRegionView = this.__appGeoMap.getGeoRegionView(pvm.getPoliticalEntity().getGeoRegion().getId_alpha3());
                    geoRegionView.setFillColor(colorMap.getColor(pvm.getResourceQuantity() / resourceQuantityMax));
                }
            },
            __updateAppGeoMapHERootSize: function () {
                var h, he, t;
                t = 50 + 5;
                h = this.__lastVPSize.getY() - (t + 41 + 20 + 10 + 20);
                document.getElementById("mapPosStatic").style.height = h + "px";
                he = document.getElementById("mapPosAbs");
                he.style.position = "absolute";
                he.style.height = h + "px";
                he.style.top = t + "px";
                he.style.left = "0";
                he.style.width = this.__lastVPSize.getX() + "px";
            },
            __windowOnResize: function () {
                var vpSize;
                vpSize = x.getViewportSize();
                if (this.__lastVPSize.equals(vpSize)) return;
                this.__lastVPSize = vpSize;
                this.__updateAppGeoMapHERootSize();
                this.__appGeoMap.notifyOfPotentialSizeChange();
            }
        };

        new MyApp();
    })();

</script>