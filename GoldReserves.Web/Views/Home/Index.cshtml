@model GoldReserves.Web.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Home Page";
}@section header {
<link rel="stylesheet" href="~/Content/jquery-ui.min.css" />
<link rel="stylesheet" href="~/Content/jquery-ui.structure.min.css" />
<link rel="stylesheet" href="~/Content/jquery-ui.theme.min.css" />
<link rel="stylesheet" href="~/Content/jquery-ui-slider-pips.css" />
<script src="~/Scripts/fixes.js"></script>
<script src="~/Scripts/topojson.v1.js"></script>
<script src="~/Scripts/ieee754FloatingPointUtilities.js"></script>
<script src="~/Scripts/geo.js"></script>
<script src="~/Scripts/appData.js"></script>
<script src="~/Scripts/appGeoMap.js"></script>
<style>
    #mapPosStatic {
        margin-top: 5px;
    }
    #mapPosStatic > .color-legend {
        position: absolute;
        z-index: 1;
    }
    .color-legend.vertical {
        height: 300px;
        width: 100px;
        border: 1px solid black;
    }
    .color-legend .gradient {
        height: 100%;
        width: 100%;
        position: relative;
    }
    .color-legend .gradient > .value {
        position: absolute;
        left: 100%;
        margin-top: -15px;
        font-size: 20px;
        color: black;
        white-space: nowrap;
    }
    .color-legend .gradient > .value:first-child {
        top: -1px;
    }
    .color-legend .gradient > .value:first-child > :not(.dash) {
        padding-top: 1px;
    }
    .color-legend .gradient > .value:last-child {
        top: 100%;
    }
    .color-legend .gradient > .value > .dash {
        height: 1px;
        display: inline-block;
        vertical-align: middle;
        width: 10px;
        background-color: black;
    }
    .color-legend .gradient > .value > :not(.dash) {
        padding-left: 10px;
    }
</style>
}
<div id="mapPosStatic">
    <div id="mapPosAbs">
    </div>
    <div class="color-legend vertical">
        <div class="gradient">
        </div>
    </div>
</div>
<script>
    (function () {
        var g = this,
            x = g.x,
            GeoRegion = x.GeoRegion,
            PoliticalEntity = x.PoliticalEntity,
            topoJsonLib = g.topojson,
            AppRepository = x.AppRepository,
            hasOwnPropF = g.Object.prototype.hasOwnProperty,
            ArrayLike_findIndex = x.ArrayLike_findIndex,
            COLOR_MAP = x.ColorMap.ORANGE;

        x.AppRepository.getInstance().__setGeoRegions((function () {
            var c, a;
            @{{
                int n = Model.GeoRegions.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});")
                for (int i = 0; i < n; i++)
                {
                    var geoRegion = Model.GeoRegions[i];
                    @Html.Raw("c=new GeoRegion();" +
                        $"c.__setId_alpha3(\"{Ajax.JavaScriptStringEncode(geoRegion.Id_Alpha3)}\");" +
                        $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}] = c;")
                }
            }}
            return a;
        })());
        x.AppRepository.getInstance().__setPoliticalEntities((function () {
            var t1, t2, a;
            @{{
                int n = Model.PoliticalEntities.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});")
                for (int i = 0; i < n; i++)
                {
                    var p = Model.PoliticalEntities[i];
                    @Html.Raw("t1=new PoliticalEntity();"
                        + $"t1.__setId({p.Id.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});"
                        + "t2={};")
                    foreach(var pen in p.Names)
                    {
                        @Html.Raw($"t2[\"{Ajax.JavaScriptStringEncode(pen.Name)}\"]={pen.LanguageId.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)};")
                    }
                    @Html.Raw(
                        $"t1.__setLanguageIdFromName(t2);"
                        + (p.GeoRegionId_Alpha3 == null
                            ? ""
                            : $"t1.__setGeoRegion(AppRepository.getInstance().getGeoRegion(\"{Ajax.JavaScriptStringEncode(p.GeoRegionId_Alpha3)}\"));")
                        + $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}]=t1;")
                }
            }}
            return a;
        })());


        function PoliticalEntityViewModel() {
            this.__politicalEntity = null;
            this.__resourceQuantity = null;
            this.__color = null;
        }
        PoliticalEntityViewModel.prototype = {
            getPoliticalEntity: function () {
                return this.__politicalEntity;
            },
            __setPoliticalEntity: function (value) {
                this.__politicalEntity = value;
            },
            getResourceQuantity: function () {
                return this.__resourceQuantity;
            },
            __setResourceQuantity: function (value) {
                this.__resourceQuantity = value;
            },
            getColor: function () {
                return this.__color;
            },
            __setColor: function (value) {
                this.__color = value;
            }
        };

        function fixGeoRegionGeoJson_features(fa) {
            var i, j;
            i = ArrayLike_findIndex(fa, function (f) { return f.properties.name === "Antarctica"; });
            if (0 <= i) fa.splice(i, 1);
            return fa;
        }

        function MyApp() {
            this.__ps = 0;
            this.__politicalEntityViewModels_xmlHttpRequest = null;
            this.__geoRegionsTopoJson_xmlHttpRequest = null;
            this.__geoRegionsTopoJson = null;
            this.__politicalEntityViewModels = null;
            this.__lastVPSize = x.getViewportSize();
            this.__windowOnResize_func = this.__windowOnResize.bind(this);
            window.addEventListener("resize", this.__windowOnResize_func, false);
            this.__updateAppGeoMapHERootSize();
            this.__appGeoMap = new x.AppGeoMap(document.getElementById("mapPosAbs"));
            this.__initialize();
        }
        MyApp.prototype = {
            __appGeoMap_setViews: function() {

                var i, n, pvm, geoRegionView, g, t, j,
                    resourceQuantityMax = -1 / 0;
                n = this.__politicalEntityViewModels.length;
                for (i = 0; i < n;) {
                    pvm = this.__politicalEntityViewModels[i];
                    t = pvm.getResourceQuantity();
                    if (resourceQuantityMax < t) {
                        resourceQuantityMax = t;
                    }
                    i += 1;
                }
                var nonGeoRegionPvmFromName_uc = {};
                for (i = 0; i < n; i++) {
                    pvm = this.__politicalEntityViewModels[i];
                    g = pvm.getPoliticalEntity().getGeoRegion();
                    if (g !== null) {
                        geoRegionView = this.__appGeoMap.getGeoRegionView(g.getId_alpha3());
                        geoRegionView.setFillColor(COLOR_MAP.getColor(pvm.getResourceQuantity() / resourceQuantityMax));
                    } else {
                        t = pvm.getPoliticalEntity().__languageIdFromName;
                        for (j in t) {
                            if (!hasOwnPropF.call(t, j)) break;
                            nonGeoRegionPvmFromName_uc[j.toUpperCase()] = pvm;
                        }
                    }
                }
                // ecb
                var c1 = this.__appGeoMap.createCircle();
                c1.setFillColor(COLOR_MAP.getColor(nonGeoRegionPvmFromName_uc["ECB"].getResourceQuantity() / resourceQuantityMax));
                c1.setCenterLatLng(new x.LatLng(48, -18));

                // waemu
                var c2 = this.__appGeoMap.createCircle();
                c2.setFillColor(COLOR_MAP.getColor(nonGeoRegionPvmFromName_uc["WAEMU"].getResourceQuantity() / resourceQuantityMax));
                //c2.setCenterLatLng(new x.LatLng(21.2237, 3.2914));
                c2.setCenterLatLng(new x.LatLng(21.2237, -20.2914));
                //var t = ['Niger', 'Togo', 'Senegal', 'Mali', 'Benin', 'Burkina Faso', "Côte d'Ivoire", 'Guinea-Bissau'].map(function (pen_name) {
                //    var p;
                //    p = AppRepository.getInstance().__politicalEntities.filter(function (p) { return p.__languageIdFromName.hasOwnProperty(pen_name); })[0];
                //    return p.getGeoRegion().getId_alpha3();
                //});
                //for (i = 0, n = t.length; i < n; i++) {
                //    this.__appGeoMap.getGeoRegionView(t[i]).setFillColor(x.Color.fromRgb(0xFF00));
                //}

                // IMF
                var c4 = this.__appGeoMap.createCircle(0.16);
                c4.setFillColor(COLOR_MAP.getColor(nonGeoRegionPvmFromName_uc["IMF"].getResourceQuantity() / resourceQuantityMax));
                c4.setCenterLatLng(new x.LatLng(-45, -15));


                // BIS
                var c3 = this.__appGeoMap.createCircle(0.16);
                c3.setFillColor(COLOR_MAP.getColor(nonGeoRegionPvmFromName_uc["BIS"].getResourceQuantity() / resourceQuantityMax));
                c3.setCenterLatLng(new x.LatLng(-45, 10));

                // ARUBA
                var c5 = this.__appGeoMap.createCircle(0.03);
                c5.setFillColor(COLOR_MAP.getColor(nonGeoRegionPvmFromName_uc["ARUBA"].getResourceQuantity() / resourceQuantityMax));
                c5.setCenterLatLng(new x.LatLng(14, -66.280518));

                var html = "", fp = 2, _10powfp = Math.pow(10, fp);
                n = 5;
                for (i = 0; i < n; i++) {
                    t = Math.round(((n - i - 1) / (n - 1) * resourceQuantityMax) * _10powfp) / _10powfp;
                    html += "<div class=\"value\"" + (i !== 0 && i !== n - 1 ? " style=\"top:" + (i * 100 / (n - 1)) + "%;\"" : "") + "><span class=\"dash\"></span><span>" + t + " " + (t === 1 ? "ton" : "tons") + "</span></div>";
                }
                document.querySelectorAll("#mapPosStatic > .color-legend > .gradient")[0].innerHTML = html;
            },
            __getGeoRegionTopologyTopoJson_onReadyStateChange: function () {
                var req, countryGeoJson_features;
                req = this.__geoRegionsTopoJson_xmlHttpRequest;
                if (req.readyState !== 4) return;
                this.__geoRegionsTopoJson_xmlHttpRequest = null;
                if (req.status !== 200) throw Error();
                this.__geoRegionsTopoJson = JSON.parse(req.responseText);
                countryGeoJson_features = topoJsonLib.feature(this.__geoRegionsTopoJson, this.__geoRegionsTopoJson.objects["units"]).features;
                countryGeoJson_features = fixGeoRegionGeoJson_features(countryGeoJson_features);
                this.__appGeoMap.initializeGeoRegionTopography(countryGeoJson_features);
                this.__ps |= 2;
                if ((this.__ps & 3) === 3) {
                    this.__appGeoMap_setViews();
                }
            },
            getPoliticalEntityViewModelsAsync: function (dt) {
                var req, url;
                if (!(dt instanceof Date)) throw Error();
                if (this.__politicalEntityViewModels_xmlHttpRequest !== null) {
                    this.__politicalEntityViewModels_xmlHttpRequest.onreadystatechange = null;
                    this.__politicalEntityViewModels_xmlHttpRequest.abort();
                    this.__politicalEntityViewModels_xmlHttpRequest = null;
                }
                this.__politicalEntityViewModels_xmlHttpRequest =
                    this.__getPoliticalEntityViewModels_onReadyStateChange.bind(this);
                url = "@Html.Raw(Ajax.JavaScriptStringEncode(Url.Action("ResourceQuantityPerPoliticalEntity")))?dataTimePoint=" + encodeURIComponent(dt.toISOString());
                req = new XMLHttpRequest();
                req.open("GET", url, true);
                req.onreadystatechange = this.__getPoliticalEntityViewModels_onReadyStateChange.bind(this);
                req.send();
                this.__politicalEntityViewModels_xmlHttpRequest = req;
            },
            __getPoliticalEntityViewModels_onReadyStateChange: function () {
                var a, b, c, d, i, n, req;
                req = this.__politicalEntityViewModels_xmlHttpRequest;
                if (req.readyState !== 4) return;
                if (req.status === 200) {
                    a = JSON.parse(req.responseText);
                    if (!x.isArray(a)) throw Error();
                    n = a.length;
                    b = new Array(n);
                    d = AppRepository.getInstance();
                    for (i = 0; i < n; i++) {
                        if (!x.isArrayLike_nonSparse(a[i]) || a.length < 2) throw Error();
                        c = new PoliticalEntityViewModel();
                        c.__setPoliticalEntity(d.getPoliticalEntity(a[i][0]));
                        c.__setResourceQuantity(a[i][1]);
                        b[i] = c;
                    }
                } else {
                    return;
                }
                this.__politicalEntityViewModels = b;
                this.__ps |= 1;
                if ((this.__ps & 3) === 3) {
                    this.__appGeoMap_setViews();
                }
            },
            __initialize: function () {

                var t1, t2;
                var req;
                t1 = document.querySelectorAll("#mapPosStatic > .color-legend > .gradient")[0];
                t2 = x.ColorMap_toCssLinearGradientFunction(COLOR_MAP, "to top");
                t1.style.backgroundImage = t2;
                req = new XMLHttpRequest();
                req.open("GET", "@Ajax.JavaScriptStringEncode(Url.Content("~/Content/geoRegionsTopoJson.json"))");
                req.onreadystatechange = this.__getGeoRegionTopologyTopoJson_onReadyStateChange.bind(this);
                req.send();
                this.__geoRegionsTopoJson_xmlHttpRequest = req;
            },
            __updateAppGeoMapHERootSize: function () {
                var h, he, t, b;
                t = 50 + 5;
                b = 41 + 20 + 10 + 20;
                h = this.__lastVPSize.getY() - (t + b);
                document.getElementById("mapPosStatic").style.height = h + "px";
                he = document.getElementById("mapPosAbs");
                he.style.position = "absolute";
                he.style.height = h + "px";
                he.style.top = t + "px";
                he.style.left = "0";
                he.style.width = this.__lastVPSize.getX() + "px";

                he = document.querySelectorAll("#mapPosStatic > .color-legend")[0];
                he.style.bottom = b + "px";
                he.style.left = b + "px";
            },
            __windowOnResize: function () {
                var vpSize;
                vpSize = x.getViewportSize();
                if (this.__lastVPSize.equals(vpSize)) return;
                this.__lastVPSize = vpSize;
                this.__updateAppGeoMapHERootSize();
                this.__appGeoMap.notifyOfPotentialSizeChange();
            }
        };

        
        window.myApp = new MyApp();
        myApp.getPoliticalEntityViewModelsAsync(new Date());
    })();

</script>
<div id="slider"></div>
@section scripts {
<script src="~/Scripts/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery-ui-slider-pips.js"></script>
<script>
    $("#slider").slider().slider("float").slider("pips");
</script>
}