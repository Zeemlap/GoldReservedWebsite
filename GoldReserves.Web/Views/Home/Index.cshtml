@model GoldReserves.Web.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Home Page";
}@section header {
<script src="~/Scripts/fixes.js"></script>
<script src="~/Scripts/topojson.v1.js"></script>
<script src="~/Scripts/ieee754FloatingPointUtilities.js"></script>
<script src="~/Scripts/geo.js"></script>
<script src="~/Scripts/appGeoMap.js"></script>
<style>
    #mapPosStatic {
        margin-top: 5px;
    }
</style>
}
<div id="mapPosStatic">
    <div id="mapPosAbs">
    </div>
</div>
<script>
    (function () {
        var g, x, Country, topoJsonLib, ArrayLike_findIndex;
        g = this;
        x = g.x;
        ArrayLike_findIndex = x.ArrayLike_findIndex;
        Country = x.Country;
        topoJsonLib = g.topojson;

        function registerCountries() {
            var c, a;
            @{
                int n = Model.Countries.Count;
                @Html.Raw($"a = new Array({n.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)});");
                for (int i = 0; i < n; i++)
                {
                    var country = Model.Countries[i];
                    @Html.Raw("c=new Country();" +
                        $"c.__setId_isoTwoLetterCode(\"{Ajax.JavaScriptStringEncode(country.Id_IsoTwoLetterCode)}\");" +
                        $"c.__setId_isoThreeLetterCode(\"{Ajax.JavaScriptStringEncode(country.Id_IsoThreeLetterCode)}\");" +
                        $"c.__setName_english(\"{Ajax.JavaScriptStringEncode(country.Name_English)}\");" +
                        $"a[{i.ToString(null, System.Globalization.NumberFormatInfo.InvariantInfo)}] = c;");
                }
            }
            x.Country.__registerAll(a);
        }
        registerCountries();

        function fixCountryGeoJson_features(fa) {
            var i, j;
            i = ArrayLike_findIndex(fa, function (f) { return f.properties.name === "Antarctica"; });
            if (0 <= i) fa.splice(i, 1);
            return fa;
        }

        function CountryViewModel(country, resourceQuantity, color) {
            this.__country = country;
            this.__resourceQuantity = resourceQuantity;
            this.__color = color;
        }
        CountryViewModel.prototype = {
            getCountry: function () {
                return this.__country;
            },
            getResourceQuantity: function () {
                return this.__resourceQuantity;
            },
            getColor: function () {
                return this.__color;
            }
        };

        function MyApp() {
            var i, n;
            this.__countryIshTopographyTopoJson_xmlHttpRequest = null;
            this.__countryIshTopographyTopoJson = null;
            this.__countryViewModels = [];
            this.__lastVPSize = x.getViewportSize();
            this.__windowOnResize_func = this.__windowOnResize.bind(this);
            window.addEventListener("resize", this.__windowOnResize_func, false);
            this.__updateAppGeoMapHERootSize();
            this.__appGeoMap = new x.AppGeoMap(document.getElementById("mapPosAbs"));
            this.__initialize();
        }
        MyApp.prototype = {
            __getCountryIshTopographyTopoJson_onReadyStateChange: function () {
                var req, countryGeoJson_features;
                req = this.__countryIshTopographyTopoJson_xmlHttpRequest;
                if (req.readyState !== 4) return;
                this.__countryIshTopographyTopoJson_xmlHttpRequest = null;
                if (req.status !== 200) throw Error();

 

                this.__countryIshTopographyTopoJson = JSON.parse(req.responseText);

                countryGeoJson_features = topoJsonLib.feature(this.__countryIshTopographyTopoJson, this.__countryIshTopographyTopoJson.objects["units"]).features;
                countryGeoJson_features = fixCountryGeoJson_features(countryGeoJson_features);
                this.__appGeoMap.initializeCountryTopography(countryGeoJson_features);
                this.__initializeAppGeoMapCore();
            },
            __initialize: function () {
                var req;
                req = new XMLHttpRequest();
                req.open("GET", "@Ajax.JavaScriptStringEncode(Url.Content("~/Content/countryIshTopographyTopoJson.json"))");
                req.onreadystatechange = this.__getCountryIshTopographyTopoJson_onReadyStateChange.bind(this);
                req.send();
                this.__countryIshTopographyTopoJson_xmlHttpRequest = req;
            },
            __initializeAppGeoMapCore: function() {
                
                var countries, i, n, cv, c, cvm, resourceQuantity,
                    colorMap = x.ColorMap.FIVE_CLASS_ORANGE,
                    RESOURCE_QUANTITY_MAX = 500;
                countries = Country.getAll();
                this.__countryViewModels = [];
                for (i = 0, n = countries.length; i < n; i++) {
                    c = countries[i];
                    cv = this.__appGeoMap.getCountryView(c.getId_isoTwoLetterCode());
                    if (cv === null) continue;
                    resourceQuantity = Math.floor(Math.random() * (RESOURCE_QUANTITY_MAX + 1));
                    cvm = new CountryViewModel(c, resourceQuantity, colorMap.getColor(resourceQuantity / RESOURCE_QUANTITY_MAX));
                    this.__countryViewModels.push(cvm);
                    cv.setFillColor(cvm.getColor());
                }

            },
            __updateAppGeoMapHERootSize: function() {
                var h, he, t;
                t = 50 + 5;
                h = this.__lastVPSize.getY() - (t + 41 + 20 + 10 + 20);
                document.getElementById("mapPosStatic").style.height = h + "px";
                he = document.getElementById("mapPosAbs");
                he.style.position = "absolute";
                he.style.height = h + "px";
                he.style.top = t + "px";
                he.style.left = "0";
                he.style.width = this.__lastVPSize.getX() + "px";
            },
            __windowOnResize: function () {
                var vpSize;
                vpSize = x.getViewportSize();
                if (this.__lastVPSize.equals(vpSize)) return;
                this.__lastVPSize = vpSize;
                this.__updateAppGeoMapHERootSize();
                this.__appGeoMap.notifyOfPotentialSizeChange();
            }
        };

        new MyApp();
    })();
    
</script>