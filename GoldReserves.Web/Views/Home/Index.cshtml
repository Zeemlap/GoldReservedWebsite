@model TonsOfGoldPerCountry.Web.Models.HomeIndexViewModel
@{
    ViewBag.Title = "Home Page";
}

@*<div class="jumbotron">
    <h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>
            ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that
            enables a clean separation of concerns and gives you full control over markup
            for enjoyable, agile development.
        </p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301865">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301866">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Web Hosting</h2>
        <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>
        <p><a class="btn btn-default" href="http://go.microsoft.com/fwlink/?LinkId=301867">Learn more &raquo;</a></p>
    </div>
</div>*@

@section header {
    <link href="~/Content/d3.geomap.css" rel="stylesheet">
    <script src="~/Scripts/d3.geomap.dependencies.min.js"></script>
    <script src="~/Scripts/d3.geomap.js"></script>
    <script src="~/Scripts/fixes.js"></script>  
    <style>
        #map {
            position: absolute;
        }
        #map > svg {
            overflow: visible;
        }
    </style>
}
<div id="mapLayoutPlaceholder"></div>
<div id="map"></div>
<script>
    (function () {
        var hasOwnPropF;
        var g;
        var isFinite;
        g = this;
        isFinite = g.isFinite;
        hasOwnPropF = g.Object.prototype.hasOwnProperty;

        function CountryViewModel(code, latitude, longitude, name) {
            this.__code = code;
            this.__lat = latitude;
            this.__lng = longitude;
            this.__name = name;
        }
        CountryViewModel.prototype = {
            getCode: function () {
                return this.__code;
            },
            getLatitude: function () {
                return this.__lat;
            },
            getLongitude: function () {
                return this.__lng;
            },
            getName: function () {
                return this.__name;
            }
        };

        function TopoJson(data, _2DOnly) {
            var i, n, transform;
            if (!x.isPojo(data)
                || _2DOnly !== true) throw Error();
            if (data.type !== "Topology"
                || !hasOwnPropF.call(data, "type")) throw Error();

            this.__sx = 1;
            this.__sy = 1;
            this.__tx = 0;
            this.__ty = 0;
            if ((transform = data.transform) !== undefined
                && hasOwnPropF.call(data, "transform")) {
                for (i in transform) {
                    if (!hasOwnPropF.call(transform, i)) break;
                    if (!__TopoJson_isPosValid_2DOnly_partial(transform[i])
                        || transform[i].length !== 2
                        || !isFinite(transform[i][0])
                        || !isFinite(transform[i][1])) throw Error();
                    switch (i) {
                        case "scale":
                            this.__sx = transform[i][0];
                            this.__sy = transform[i][1];
                            break;
                        case "transform":
                            this.__sx = transform[i][0];
                            this.__sy = transform[i][1];
                            break;
                        default:
                            throw Error();
                    }
                }
            }

            this.__arcs = data.arcs;
            if (!x.isArrayLike_nonSparse(this.__arcs)
                || !hasOwnPropF.call(data, "arcs")) throw Error();
            n = this.__arcs.length;
            for (i = 0; i < n; i++) {
                if (!TopoJson_isArcValid_2DOnly(this.__arcs[i])) throw Error();
            }

            this.__objects = data.objects;
            if (!x.isPojo(this.__objects)) throw Error();
            for (i in this.__objects) {
                if (!hasOwnPropF.call(this.__objects, i)) break;

            }
        }

        function __TopoJson_isPosValid_2DOnly_partial(pos) {
            var n;
            if (typeof pos !== "object" || pos === null) return false;
            if (!hasOwnPropF.call(pos, "length")
                || typeof (n = pos.length) !== "number"
                || n < 2 || !(n % 1 === 0)
                || typeof pos[0] !== "number"
                || typeof pos[1] !== "number") return false;
            return true;
        }
        function TopoJson_isArcValid_2DOnly(arc) {
            var i, n, x, y;
            if (!x.isArrayLike_nonSparse(arc)) return false;
            n = arc.length;
            if (n === 0 || !__TopoJson_isPosValid_2DOnly_partial(arc[0])) return false;
            x = arc[0][0];
            y = arc[0][1];
            for (i = 1; i < n; i++) {
                if (!__TopoJson_isPosValid_partial(arc[i])) return false;
                x += arc[i][0];
                y += arc[i][1];
            }
            if (!isFinite(x)
                || !isFinite(y)) return false;
            return true;
        }

        function AppGeoMap_topoJsonToSvg(topoJson) {
            var objects, object, i;
            if (!x.isPojo(objects = topoJson.objects)) throw Error();
            
            for (i in objects) {
                if (!hasOwnPropF(objects, i)) break;
                object = objects[i];
                if (!hasOwnPropF.call(object, "type")) throw Error();
                switch (object.type) {
                    case "Point":
                        break;
                    case "MultiPoint":
                        break;
                    case "LineString":
                        break;
                    case "MultiLineString":
                        break;
                    case "Polygon":

                        break;
                    case "MultiPolygon":
                        break;
                    case "GeometryCollection":
                        break;
                    default:
                        throw Error();
                }
            }
        }

        function AppGeoMap() {
            this.__dataSource = null;
        }
        AppGeoMap.prototype = {
            getDataSource: function() {
                return this.__dataSource;
            },
            setDataSource: function (value) {
                if (!(value instanceof TopoJson)) {
                    throw Error();
                }
                GoeMap_topoJsonToSvg(value);
                this.__dataSource = value;
            }
        };

        function Vector2(x, y) {
            this.__x = x;
            this.__y = y;
        }
        Vector2.prototype = {
            getX: function () {
                return this.__x;
            },
            getY: function () {
                return this.__y;
            }
        };

        function MyApp() {
            var i, n;
            this.__countryTopoJson = new TopoJson(@{
                Html.RenderAction("CountryGeoData", new { format = "topojson", });
            });
            this.__countryViewModels = [
                @for (int i = 0, iLast = Model.Countries.Count - 1; i <= iLast; i++)
            {
                        var country = Model.Countries[i];
                        @Html.Raw($"new CountryViewModel(\"{Ajax.JavaScriptStringEncode(country.Code)}\"," +
                            $"{country.Latitude.ToString("R", System.Globalization.NumberFormatInfo.InvariantInfo)}," +
                            $"{country.Longitude.ToString("R", System.Globalization.NumberFormatInfo.InvariantInfo)}," +
                            $"\"{Ajax.JavaScriptStringEncode(country.Name)}\")");
                        if (i < iLast)
                        {
                            @Html.Raw(",");
                        }
                    }
            ];

            this.__appGeoMap = new GeoMap();
            this.__appGeoMap.setDataSource(this.__countryTopoJson);
        }
        function MyApp_d3GeoMap_computeSize(maxWidth, maxHeight) {
            var ar;
            var h;
            var w;
            ar = 1.92;
            // height * 1.92 == width
            h = maxWidth / ar;
            w = maxHeight * ar;
            if (w < maxWidth && h < maxHeight) {
                if (w * maxHeight < h * maxWidth) {
                    return new Vector2(maxWidth, h);
                }
                return new Vector2(w, maxHeight);
            }
            if (w < maxWidth) {
                return new Vector2(w, maxHeight);
            }
            if (maxHeight <= h) throw Error("should be unreachable");
            return new Vector2(maxWidth, h);
        }

        MyApp.prototype = {
            __windowOnResize: function () {
                this.__d3GeoMap_updateSize();
            },
            __d3GeoMap_updateSize: function () {
                var heMapLayoutPH,
                    heMap,
                    d3GeoMap_desiredSize,
                    d3GeoMap_offset,
                    d3GeoMap_maxHeight,
                    spacingTop,
                    spacingBottom;
                spacingTop = 50; // header.borderBoxHeight
                spacingBottom =
                    41 + // hr.borderBoxHeight + hr.marginTop + hr.marginBottom
                    20 + // footer.borderBoxHeight
                    10 + // ???
                    20; // body.paddingBottom
                d3GeoMap_maxHeight = window.innerHeight - (spacingTop + spacingBottom);
                d3GeoMap_desiredSize = MyApp_d3GeoMap_computeSize(window.innerWidth, d3GeoMap_maxHeight);
                d3GeoMap_offset = new Vector2(0.5 * (window.innerWidth - d3GeoMap_desiredSize.getX()), 0.5 * (d3GeoMap_maxHeight - d3GeoMap_desiredSize.getY()));

                heMapLayoutPH = document.getElementById("mapLayoutPlaceholder");
                heMapLayoutPH.style.height = x.formatNumberForOldCss(d3GeoMap_maxHeight) + "px";
                heMap = document.getElementById("map");
                x.setOwnSrcPropsOnDst({
                    top: x.formatNumberForOldCss(spacingTop + d3GeoMap_offset.getY()) + "px",
                    left: x.formatNumberForOldCss(d3GeoMap_offset.getX()) + "px"
                }, heMap.style);
                this.__d3GeoMap
                    .width(d3GeoMap_desiredSize.getX())
                    .height(d3GeoMap_desiredSize.getY())
                    .scale(d3GeoMap_desiredSize.getX() * (1 / 5.409));
                x.HostElement_childNodes_clear(heMap);
                d3.select('#map')
                    .call(this.__d3GeoMap.draw, this.__d3GeoMap);
            }
        };

        
    })();
    new MyApp();
</script>